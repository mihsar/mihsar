name: Build & Release draft

on:
  push:
    branches:
      - 'main'
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    types: [ opened, reopened, synchronize, edited ]

permissions:
  contents: read

jobs:
  deploy:
    name: build dependencies & create artifact
    runs-on: ubuntu-latest
    outputs:
      repository_version: ${{ steps.vars.outputs.tag_or_branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
      - name: Install composer dependencies
        run: composer install --no-dev -o
      - name: Clean-up project
        uses: PrestaShopCorp/github-action-clean-before-deploy@v1.0
      - name: Prepare auto-index tool
        run: composer global require prestashop/autoindex
      - name: Generate index.php
        run: ~/.composer/vendor/bin/autoindex
      - name: Create & upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}
          path: /home/runner/work/${{ github.event.repository.name }}
      - name: Set output of the current tag/branch from repo
        id: vars
        run: echo "tag_or_branch=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
  update_release_draft:
    runs-on: ubuntu-latest
    needs: [deploy]
    permissions:
      # write permission is required to create a GitHub release
      contents: write
      # write permission is required for auto labeler
      # otherwise, read permission is required at least
      pull-requests: write
    env:
      ASSET_FILENAME: "${{ github.event.repository.name }}-${{ needs.deploy.outputs.repository_version }}"
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}
          path: ${{ github.event.repository.name }}
      - id: release_info
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Prepare for Release
        run: |
          cd ${{ github.event.repository.name }}
          zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}
      - name: Clean existing assets
        shell: bash
        run: |
          curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
          assets=`bin/hub api -t repos/${{ github.repository }}/releases/${{ steps.release_info.outputs.id }}/assets | awk '/\].url/ { print $2 }'`
          for asset in $assets
          do
              bin/hub api -X DELETE $asset
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to GitHub Release
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_info.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}/${{ github.event.repository.name }}.zip
          asset_name: ${{ env.ASSET_FILENAME }}.zip
          asset_content_type: application/zip
